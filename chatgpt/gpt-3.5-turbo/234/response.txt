# Response Time: 17.60487675666809
Sure, here's an example refactoring for the deprecated method `java.sql.Time.setYear(int)`:

<<< Before refactoring:
```
java.sql.Time time = new java.sql.Time(System.currentTimeMillis());
time.setYear(2021);
```

>>> After refactoring:
```
java.sql.Time time = new java.sql.Time(System.currentTimeMillis());
java.util.Calendar cal = java.util.Calendar.getInstance();
cal.setTime(time);
cal.set(java.util.Calendar.YEAR, 2021);
time = new java.sql.Time(cal.getTimeInMillis());
```

In this refactored code, we use a `java.util.Calendar` object to set the year of the `java.sql.Time` object. We first get the current time using `System.currentTimeMillis()`, create a new `java.sql.Time` object with that time, and then create a `java.util.Calendar` object and set its time to the `java.sql.Time` object. We then use the `set` method of the `java.util.Calendar` object to set the year to 2021, and finally create a new `java.sql.Time` object with the updated time from the `java.util.Calendar` object.