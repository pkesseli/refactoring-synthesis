# Response Time: 17.095366954803467
Sure, here's an example refactoring:

<<< Before refactoring:
```
StringMonitor stringMonitor = new StringMonitor(mbeanServer, monitorName, stringAttribute);
long derivedGaugeTimeStamp = stringMonitor.getDerivedGaugeTimeStamp();
```

>>> After refactoring:
```
StringMonitor stringMonitor = new StringMonitor();
stringMonitor.addObservedObject(mbeanServer, monitorName);
stringMonitor.addObservedAttribute(stringAttribute);
ObjectName objectName = stringMonitor.getObservedObjectNames().iterator().next();
long derivedGaugeTimeStamp = stringMonitor.getDerivedGaugeTimeStamp(objectName);
```

In the refactored code, we create a new `StringMonitor` object and add the observed object and attribute separately using the `addObservedObject` and `addObservedAttribute` methods. We then retrieve the `ObjectName` of the observed object using the `getObservedObjectNames` method and pass it to the `getDerivedGaugeTimeStamp` method to get the derived gauge timestamp. This is in line with the deprecation comment in the Javadoc, which recommends using the `getDerivedGaugeTimeStamp(ObjectName)` method instead.