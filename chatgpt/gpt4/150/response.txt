# Response Time: 25.06468653678894
<<< Before refactoring: 
```
Thread thread = new Thread(() -> {
    while (true) {
        // do some work
    }
});
thread.start();

// Stop the thread after 10 seconds
try {
    Thread.sleep(10000);
} catch (InterruptedException e) {
    e.printStackTrace();
}
thread.stop();
```

>>> After refactoring: 
```
AtomicBoolean running = new AtomicBoolean(true);

Thread thread = new Thread(() -> {
    while (running.get()) {
        // do some work
    }
});
thread.start();

// Stop the thread after 10 seconds
try {
    Thread.sleep(10000);
} catch (InterruptedException e) {
    e.printStackTrace();
}
running.set(false);
``` 

In this example, the code uses the deprecated `Thread.stop()` method to forcefully stop the thread after 10 seconds of execution. To refactor this code, we can introduce an `AtomicBoolean` variable named `running`, which the thread can check to see if it should keep running. The main thread can then set the `running` variable to `false` after 10 seconds to stop the thread gracefully.