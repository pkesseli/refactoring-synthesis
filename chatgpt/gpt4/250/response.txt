# Response Time: 35.04702854156494
Sure, here's an example refactoring for you:

Before refactoring:

```
import java.util.Date;

public class Example {
    public static void main(String[] args) {
        Date date = new Date();
        int year = date.getYear();
        System.out.println("Year: " + year);
    }
}
```

After refactoring:

```
import java.util.Calendar;

public class Example {
    public static void main(String[] args) {
        Calendar calendar = Calendar.getInstance();
        int year = calendar.get(Calendar.YEAR) - 1900;
        System.out.println("Year: " + year);
    }
}
```

Explanation:

In the original code, the `getYear()` method of the `java.util.Date` class is used to get the year of the current date. However, this method has been deprecated since JDK version 1.1, and its use is discouraged. The deprecation comment suggests using the `get(Calendar.YEAR)` method of the `java.util.Calendar` class instead.

In the refactored code, we first create an instance of the `Calendar` class using the `getInstance()` method. We then get the year using the `get(Calendar.YEAR)` method and subtract 1900 from it, as suggested by the deprecation comment. Finally, we print the year using `System.out.println()`. This refactored code achieves the same functionality as the original code, but uses the recommended method to get the year.