# Response Time: 46.68031144142151
Sure, here's an example of refactoring code that uses the deprecated `javax.net.ssl.SSLSession.getPeerCertificateChain()` method:

<<< Before refactoring:
```
import javax.net.ssl.SSLSession;
import java.security.cert.X509Certificate;

SSLSession sslSession = ...; // obtain SSLSession object
X509Certificate[] certs = (X509Certificate[]) sslSession.getPeerCertificateChain();
```

>>> After refactoring:
```
import javax.net.ssl.SSLSession;
import java.security.cert.Certificate;
import java.security.cert.X509Certificate;

SSLSession sslSession = ...; // obtain SSLSession object
Certificate[] certs = sslSession.getPeerCertificates();
if (certs != null && certs.length > 0 && certs[0] instanceof X509Certificate) {
    // Use the first certificate in the chain if it's an X509Certificate
    X509Certificate[] x509Certs = new X509Certificate[certs.length];
    for (int i = 0; i < certs.length; i++) {
        x509Certs[i] = (X509Certificate) certs[i];
    }
    // Use x509Certs as the certificate chain
} else {
    // Handle the case where the certificate chain is not an X509Certificate chain
}
```

In the refactored code, we've replaced the use of `sslSession.getPeerCertificateChain()` with `sslSession.getPeerCertificates()`, as suggested in the deprecation comment. We've also added a check to make sure that the certificates returned are of type `X509Certificate`, since the original code was casting the result to this type. Finally, we've created a new `X509Certificate` array to hold the certificate chain and copied the certificates from the `Certificate` array to the `X509Certificate` array.