# Response Time: 15.396204233169556


Sure, I can give you an example of how to refactor your code to use the `feature()` method instead of the deprecated `major()` method.

Let's say you have the following code:

```
import java.lang.Runtime.Version;

public class VersionExample {
    public static void main(String[] args) {
        Version version = Runtime.version();
        int majorVersion = version.major();
        System.out.println("Major version: " + majorVersion);
    }
}
```

To use the `feature()` method instead, you can modify the code as follows:

```
import java.lang.Runtime.Version;

public class VersionExample {
    public static void main(String[] args) {
        Version version = Runtime.version();
        int featureVersion = version.feature();
        System.out.println("Feature version: " + featureVersion);
    }
}
```

This code creates a `Version` object using the `version()` method of the `Runtime` class, and then calls the `feature()` method on it to get the feature-release counter. This is the recommended way to get the version number in Java SE 10 and later.

Note that for compatibility, the `major()` method still returns the value of the feature element, so the code would still work if you continue to use it. However, it is deprecated, and you should update your code to use the `feature()` method instead.