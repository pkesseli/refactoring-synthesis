# Response Time: 18.32859182357788
Sure, here is an example of how to refactor code that uses the deprecated `getBigDecimal(String, int)` method in `java.sql.ResultSet`:

Before refactoring:

```java
import java.math.BigDecimal;
import java.sql.ResultSet;
import java.sql.SQLException;

public class ExampleClass {

    public BigDecimal getBigDecimalFromResultSet(ResultSet resultSet, String columnName, int scale) throws SQLException {
        return resultSet.getBigDecimal(columnName, scale);
    }

}
```

After refactoring:

```java
import java.math.BigDecimal;
import java.sql.ResultSet;
import java.sql.SQLException;

public class ExampleClass {

    public BigDecimal getBigDecimalFromResultSet(ResultSet resultSet, String columnName, int scale) throws SQLException {
        BigDecimal result = resultSet.getBigDecimal(columnName);
        if (result != null) {
            result = result.setScale(scale, BigDecimal.ROUND_HALF_UP);
        }
        return result;
    }

}
```

In the refactored code, we use the `getBigDecimal(String)` method instead of the deprecated `getBigDecimal(String, int)` method. We then check if the returned `BigDecimal` object is not `null`, and if it's not, we use the `setScale(int, RoundingMode)` method to set the desired scale and rounding mode for the `BigDecimal` object.

Note that we are assuming that the desired rounding mode is `BigDecimal.ROUND_HALF_UP`. You may need to adjust this to match your specific use case.