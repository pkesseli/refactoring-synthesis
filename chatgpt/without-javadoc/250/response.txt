# Response Time: 14.401344060897827
Sure, here's an example of how you could refactor code that uses the deprecated `java.util.Date.getYear()` method:

Before:

```java
import java.util.Date;

public class Example {
    public static void main(String[] args) {
        Date currentDate = new Date();
        int year = currentDate.getYear();
        System.out.println("Current year: " + (year + 1900));
    }
}
```

After:

```java
import java.time.LocalDate;

public class Example {
    public static void main(String[] args) {
        LocalDate currentDate = LocalDate.now();
        int year = currentDate.getYear();
        System.out.println("Current year: " + year);
    }
}
```

In the refactored code, we're using the `java.time.LocalDate` class instead of `java.util.Date`. This class provides a `getYear()` method that works differently from the deprecated method in `java.util.Date` - it returns the actual year, rather than the year minus 1900.

To get the current date, we're using the `LocalDate.now()` method instead of creating a new `Date` object. Finally, we're simply printing out the value of `year`, without adding 1900 to it.