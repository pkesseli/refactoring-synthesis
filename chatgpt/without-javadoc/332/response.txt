# Response Time: 35.83724594116211


Sure! Here's an example of how you could refactor the deprecated method `createKeyboardHomeListener()` in `javax.swing.plaf.basic.BasicSplitPaneUI`:

Before:

```java
public class MySplitPaneUI extends BasicSplitPaneUI {
    
    public MySplitPaneUI() {
        super();
    }

    private KeyStroke homeKey = KeyStroke.getKeyStroke(KeyEvent.VK_HOME, 0);
    
    @Override
    protected BasicSplitPaneDivider createDefaultDivider() {
        return new MySplitPaneDivider(this);
    }
    
    @SuppressWarnings("serial")
    private class MySplitPaneDivider extends BasicSplitPaneDivider {
        
        public MySplitPaneDivider(BasicSplitPaneUI ui) {
            super(ui);
        }
        
        @Override
        public void paint(Graphics g) {
            // custom paint code
        }
        
        @Override
        public void updateUI() {
            // custom updateUI code
        }
    }
    
    @Override
    protected void installKeyboardActions() {
        super.installKeyboardActions();
        
        Action homeAction = new AbstractAction() {
            @Override
            public void actionPerformed(ActionEvent e) {
                KeyboardHomeAction();
            }
        };
        getInputMap(JComponent.WHEN_ANCESTOR_OF_FOCUSED_COMPONENT).put(homeKey, "homeAction");
        getActionMap().put("homeAction", homeAction);
    }
    
    private void KeyboardHomeAction() {
        // custom keyboard home action code
    }
    
    @Deprecated
    protected ActionListener createKeyboardHomeListener() {
        return new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                KeyboardHomeAction();
            }
        };
    }
}
```

After:

```java
public class MySplitPaneUI extends BasicSplitPaneUI {
    
    public MySplitPaneUI() {
        super();
    }

    private KeyStroke homeKey = KeyStroke.getKeyStroke(KeyEvent.VK_HOME, 0);
    
    @Override
    protected BasicSplitPaneDivider createDefaultDivider() {
        return new MySplitPaneDivider(this);
    }
    
    @SuppressWarnings("serial")
    private class MySplitPaneDivider extends BasicSplitPaneDivider {
        
        public MySplitPaneDivider(BasicSplitPaneUI ui) {
            super(ui);
        }
        
        @Override
        public void paint(Graphics g) {
            // custom paint code
        }
        
        @Override
        public void updateUI() {
            // custom updateUI code
        }
    }
    
    @Override
    protected void installKeyboardActions() {
        super.installKeyboardActions();
        
        Action homeAction = new AbstractAction() {
            @Override
            public void actionPerformed(ActionEvent e) {
                KeyboardHomeAction();
            }
        };
        getInputMap(JComponent.WHEN_ANCESTOR_OF_FOCUSED_COMPONENT).put(homeKey, "homeAction");
        getActionMap().put("homeAction", homeAction);
    }
    
    private void KeyboardHomeAction() {
        // custom keyboard home action code
    }
    
    private void installHomeAction() {
        Action homeAction = new AbstractAction() {
            @Override
            public void actionPerformed(ActionEvent e) {
                KeyboardHomeAction();
            }
        };
        getInputMap(JComponent.WHEN_ANCESTOR_OF_FOCUSED_COMPONENT).put(homeKey, "homeAction");
        getActionMap().put("homeAction", homeAction);
    }
    
    private void uninstallHomeAction() {
        getInputMap(JComponent.WHEN_ANCESTOR_OF_FOCUSED_COMPONENT).remove(homeKey);
        getActionMap().remove("homeAction");
    }
    
    @Override
    protected void installDefaults() {
        super.installDefaults();
        installHomeAction();
    }
