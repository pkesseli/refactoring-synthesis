# Response Time: 36.03860831260681
Sure! Here's an example refactoring that replaces the deprecated method `javax.swing.text.PlainView.drawSelectedText(Graphics, int, int, int, int)`:

Before refactoring:

```java
@Override
public void paint(Graphics g, Shape a) {
    super.paint(g, a);
    JTextComponent text = (JTextComponent) getContainer();
    Highlighter highlighter = text.getHighlighter();
    if (highlighter instanceof DefaultHighlighter) {
        DefaultHighlighter dh = (DefaultHighlighter) highlighter;
        g.setColor(text.getSelectionColor());
        for (Highlighter.Highlight h : dh.getHighlights()) {
            int start = h.getStartOffset();
            int end = h.getEndOffset();
            Rectangle clip = g.getClipBounds();
            Shape shape = a.getBounds();
            try {
                Shape s = text.modelToView(start, Position.Bias.Forward, end, Position.Bias.Backward, shape);
                if (s != null && clip.intersects(s.getBounds())) {
                    g.fillRect((int) s.getBounds().getX(), (int) s.getBounds().getY(),
                            (int) s.getBounds().getWidth(), (int) s.getBounds().getHeight());
                }
            } catch (BadLocationException e) {
                e.printStackTrace();
            }
        }
    } else {
        for (int i = 0; i < text.getSelectionEnd(); i++) {
            if (text.isHighlighterActive()) {
                g.setColor(text.getSelectionColor());
            } else {
                g.setColor(text.getForeground());
            }
            if (text.isEditable() && text.isFocusOwner()) {
                g.fillRect(0, i * text.getFontMetrics(text.getFont()).getHeight(),
                        text.getWidth(), text.getFontMetrics(text.getFont()).getHeight());
            }
        }
    }
}
```

After refactoring:

```java
@Override
public void paint(Graphics g, Shape a) {
    super.paint(g, a);
    JTextComponent text = (JTextComponent) getContainer();
    Highlighter highlighter = text.getHighlighter();
    if (highlighter instanceof DefaultHighlighter) {
        DefaultHighlighter dh = (DefaultHighlighter) highlighter;
        g.setColor(text.getSelectionColor());
        for (Highlighter.Highlight h : dh.getHighlights()) {
            int start = h.getStartOffset();
            int end = h.getEndOffset();
            Rectangle clip = g.getClipBounds();
            Shape shape = a.getBounds();
            try {
                Shape s = text.modelToView(start, Position.Bias.Forward, end, Position.Bias.Backward, shape);
                if (s != null && clip.intersects(s.getBounds())) {
                    g.fillRect((int) s.getBounds().getX(), (int) s.getBounds().getY(),
                            (int) s.getBounds().getWidth(), (int) s.getBounds().getHeight());
                }
            } catch (BadLocationException e) {
                e.printStackTrace();
            }
        }
    } else {
        g.setColor(text.getSelectionColor());
        TextUI ui = text.getUI();
        Rectangle r = ui.modelToView(text, text.getSelectionStart(), Position.Bias.Forward,
                text.getSelectionEnd(), Position.Bias.Backward);
        if (r != null) {
            g.fillRect(r.x, r.y, r.width, r.height);
        }
    }
}
```

In the refactored code, we have replaced the deprecated method `drawSelectedText()` with `TextUI.modelToView()`. This new method takes the text component, the start and end offsets of the selection, and their respective bias positions as arguments, and returns a rectangle that represents the selection's bounds. We use this rectangle to draw the selected text using the `Graphics.fillRect()` method.