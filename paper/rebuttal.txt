Reviewer A:
Q1. What do the generators look like? Please provide the generators you used for synthesis and verification.
- Counterexample generator (used for verification): Configured with respect to the method to be refactored, accepts expected instance and parameter types (including static variables). Recursively instantiates each requested type using other generators in the generator repository, reflection or objenesis in this order of preference. For reflection or objenesis instantiation fields are recursively instantiated up to a configurable depth, after which they are left with default/null values. Due to this priority, literal values such as strings or ints are always retrieved from JQF generators.
- Candidate generator (used for synthesis): Instruction set of subset of Java is constructed based on Code Hint and Type information as the described in the paper, including parameter expressions. A pre-configured maximum number of statements with maxmium expression height is selected from the instruction set based on `SourceOfRandomness`.

The CEGIS synthesis and verification constraints are mapped to `FuzzStatement` executions, where `AssertionFailedError` are raised if a new candidate or counterexample is found.

Reviewer B:
Q1: What were your refactorings evaluated on?
A candidate refactoring is considered to be a solution if it is observationally equivalent to the original code on 500 inputs, which we test by fuzzing as explained in the paper. Additionally, we manually inspected the generated refactorings.  
Q2: How does your tool work? Is it a plugin that will just do the refactorings automatically? How the unsound cases would be handled? Would one need to manually accept each and every refactoring?
We envision that our tool will be used as a plugin that suggests refactorings to the programmer, who would manually accept them. 
Q3: How practical is your approach with regards to manual refactorings and/or automated change pattern suggestions etc.?
- Manual refactorings require the user to read and understand the code to be refactored, as well as the new API. A plug-in approach can e.g. perform these refactorings in the background and suggest them to the user when ready. Users would not have to actively worry about refactorings, but would get code markers in the IDE suggesting refactorings where appropriate. This reduces developer time spent on refactorings and can instead be used in other areas.

Reviewer C:
Q1: Did the authors manually verify the soundness reported in Tables 1 and 2?
- Yes, we did manually verify the soundness of the results.
Q2: How good are the automatic refactorings proposed by this tool?
- For Zest Guidance with Code Hints present, only one out of 91 refactorings were unsound, and only 5 out of 132 when including scenarios with missing Code Hints. These "unsound" refactorings worked correctly for base classes, but did not consider the behaviour of subclasses, which can be amended by extending our constraint. We deemed this strong evidence that a fuzzing-based approach can give high confidence in automated refactorings.
Q3: Why 500 inputs, and not 250 or 5000? Would more/less inputs affect the output of the tool?
- We tried fuzzing additional inputs up to 2500, but they did not improve results. We will add these results in a revised paper.
Q4: Why 5 minutes, and not 30 minutes or 24h? Would shorter/longer runs affect the output of the tool?
- We tried alternative runtimes up to 15 minutes, but they did not improve results. We will add these results in a revised paper.
Q5: L567: Don't all Java objects inherit from java.lang.Object?
- We meant to say that we only consider class types which *directly* inherit from Object, as e.g. `java.util.Date` does.

Additional comments
Reviewer A:
Line 560: "for any class that is being loaded by the class loader of P_1, it must also be loaded by the class loader P_2" --> why is this requirement necessary? What if a class is deprecated and should not be used in P_2?
- Our refactoring only targets deprecated methods, and we apply a strict notion of equivalence on the observable state of the program. Our program does not need to load all classes and many of our refactorings do not, but we assert during verification that every class (even deprecated ones) loaded by either program version has the same static state. For classes not loaded by the refactored program, we effectively assert that the original program did not change their state beyond what is implied by the class initialiser.

Line 715: "most of the affected classes in the java.lang package do not maintain a static state" --> Do you have evidence for this?
- By "affected" classes we were referring to classes in our benchmark set for which we could not synthesise sound refactorings. Not being able to reset the static state of a class in `java.lang` was never the reason for unsoundness or incompleteness in our benchmark set.

Line 637: What does notation "{{ ... }}" mean?
This notation denotes a set of sets, e.g. {{1}, {2,3}}.

All reviewers:
Replication package: We did intend to provide a replication package. However, the question "Do you intend to submit to an artifact if the paper is accepted?" on the submission page gave us the impression that that is only necessary if the paper is accepted. 


